#include <Servo.h>// some libray that we use with servo , ultrasonic, and keypad
#include <NewPing.h>
#include <Keypad.h>

const byte ROWS = 4;
const byte COLS = 4;
//Pin is on Arduino which connect with Arduino
#define TRIG_PIN  12
#define ECHO_PIN  13
#define MAX_DISTANCE 200

char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
//Pin is on Arduino that we use with keypad
byte rowPins[ROWS] = {A5, A4, 11, 10}; // R1–R4
byte colPins[COLS] = {9, 8, 7, 0};     // C1–C4 (last column on pin 0)
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);
int arr[8]={0,1,2,3,4,3,2,1};
NewPing sonar(TRIG_PIN, ECHO_PIN, MAX_DISTANCE);
Servo myServo;
unsigned long start, time;
int index;
int a_l = 0, a_r = 0 , left = 0 , right = 0 ;
int turn = 0,// variable use for solving problem
    distance,
    i = 60,
    j = 120,
    angle,
    IRSensor,
    position = 0,
    inform_1 = 0,
    inform_2 = 0,
    value;
int enb = 6,
    ena = 5,
    in1 = 2,
    in2 = 4;
int l,m,r,p;
void setup() {

  Serial.begin(9600);
  pinMode(enb , OUTPUT);
  pinMode(ena , OUTPUT);
  pinMode(in1 , OUTPUT);
  pinMode(in2 , OUTPUT);
  myServo.attach(3);
  // starting point a servo motor is at 98 degrees 
  myServo.write(98);
}
void go_straight(){
  //Two pins that connect with Arduino for controlling dc motor
  digitalWrite(in1 , HIGH);
  digitalWrite(in2 , HIGH);
  //Motor's speed
  analogWrite(ena , 100);
  analogWrite(enb , 93);

}
void turn_left(){

  digitalWrite(in1 , LOW);
  digitalWrite(in2 , HIGH);

  analogWrite(ena , 0);
  analogWrite(enb , 80);
  
}
void turn_right(){
  
  digitalWrite(in1 , HIGH);
  digitalWrite(in2 , LOW);

  analogWrite(ena , 90);
  analogWrite(enb , 0);
}
void stop(){
  
  digitalWrite(in1 , LOW);
  digitalWrite(in2 , LOW);

  analogWrite(ena , 0);
  analogWrite(enb , 0);

}
void run(int data){
  if( p == 1){
    inform_1 = 1;
  }//when the robot is on black lines
  if( p == 0 && inform_1 == 1){
    inform_2++;
    inform_1 = 0;
    start = time;
  }//it counts black lines that is position
  if(time-start > 300){
    inform_2 = 0;
  }//It will delete data if the robot think is noise
  if( data == 8 ){
    turn_left();
    turn = 1;
  }else if(data == 2){
    turn_right();
    turn = 2;
  }else if(data == 1){
    turn_right();
  }else if( data == 0){
    if(turn == 1){
      turn_left();
    }else if(turn == 2){
      turn_right();
    }//The robot car turns left or right when all sensors is not detect on the black line
  }else{//This data help the robot car to decision turns left or right
    if(r == 1){
      turn = 2;
    }else if(l == 1){
      turn = 1; 
    }
    go_straight();
  }//This block code work when the robot move forward to the destination
  if( inform_2 == 2 && position != 100){
    value++;
    inform_2 = 0;
  }//when it is arries the destination it will turn turn left or right to come back to base position
  if(value == position){
    stop();
    delay(3000);
    value = 0;
    if(position < 3){
      if(index > 5){
        turn_right();
        delay(1000);
        turn = 2;
      }else{
        turn_left();
        delay(1000);
        turn = 1;
      }
    }
    position = 100;
  }
  if(inform_2 == 4){
    stop();// The robot car stop when it arries base position after it turns left or right
    position = 0;
    if( index < 3 || index == 5){
      turn_right();
      delay(300);
      stop();
      delay(100);
    }else{
      turn_left();
      delay(300);
      stop();
      delay(100);
    }
  }
}
void step1(int ir){
  distance = 0;
  delay(100);//The robot will turn left or right to navagate obstacles
  while(distance < 30){
    distance = sonar.ping_cm();
    (distance <= 0)?(distance = 200):distance;
    if(ir == 1){
      turn_left();
    }else{
      turn_right();
    }
    delay(10);
  }
  stop();
  delay(100);
  angle = 98;
  if(ir == 2){//This block code turns left or right to keep distance 30cm to obstacle
    while(angle < 158){
      myServo.write(angle);
      distance = sonar.ping_cm();
      (distance <= 0)?(distance = 200):distance;
      if(distance < 30){
        turn_right();
      }else{
        stop();
        angle++;
      }
      delay(10);
    }
  }else{
    while(angle > 38){
      myServo.write(angle);
      distance = sonar.ping_cm();
      (distance <= 0)?(distance = 200):distance;
      if(distance < 30){
        turn_left();
      }else{
        stop();
        angle--;
      }
      delay(10);
      delay(100);
    }
  }
  distance = 0;//the robot move forward to imform, obstacles are not in front of it
  while(distance < 50){
    distance = sonar.ping_cm();
    (distance <= 0)?(distance = 200):distance;
    go_straight();
    delay(10);
  }
  stop();
  delay(1000);
}
void detect(int a , int b){
  if(i <= a){// this function help servo ratation from angle that is enter
    i++;
    if(i == a){
      j = a;
    }
    myServo.write(i);
    angle = i;
  }else if(j >= b){
    j--;
    if(j == b){
      i = b;
    }
    myServo.write(j);
    angle = j;
  }
  
  distance = sonar.ping_cm();
  (distance <= 0)?(distance = 200):distance;
}
void object(){
  stop();
  delay(100);
  a_l = 0;//The robot reset all data to 0 
  a_r = 0;
  left = 0;
  right = 0;//The robot scans obstales that are at left of it
  for(angle ; angle <= 180 ; angle++){ 
    if(angle > 98 ){
      distance = sonar.ping_cm();
      (distance <= 0)?(distance = 200):distance;
      if(distance > (25 / cos((angle - 98) * (PI / 180))) && a_l == 0){
        a_l = angle-98;
      }else if(distance < 25 && angle > 150){
        left = 1;
      }
    } 
    myServo.write(angle);
    delay(10);
  }
  angle = 180;//The robot scans obstacles that are at right of it
  for(angle ; angle >= 0 ; angle--){  
    if(angle < 98){
      distance = sonar.ping_cm();
      (distance <= 0)?(distance = 200):distance;
      if(distance > (25 / cos((angle - 98) * (PI / 180))) && a_r == 0){
        a_r = 98-angle;
      }else if(distance < 25 && angle < 30){
        right = 1;
      }
    }
    myServo.write(angle);
    delay(10);
  }
  myServo.write(98);
  delay(100);
}
void Go(int a , int b){
  IRSensor = 0;
  detect(a,b);//This block code work to find the black line that is behind obstacles
  while( IRSensor != 6 && IRSensor != 12 && IRSensor != 14 && IRSensor != 15){
    p = digitalRead(A0);
    r = digitalRead(A1);
    m = digitalRead(A2);
    l = digitalRead(A3);
    
    IRSensor = (l*8+m*4+r*2+p);
    detect(a,b);
    if(distance > 25 && distance < 35 ){
      go_straight();
    }else if(distance > 35){
      if(left == 1){
        turn_left();
      }else{
        turn_right();
      }
    }else{
      if(left == 1){
        turn_right();
      }else{
        turn_left();
      }
    }
    delay(5);
  }
  stop();
  delay(100);
  go_straight();
  delay(100);
}
void wall(){
  object();//The robot scans obstacle around it to make decision
  if(left == 1 || a_r < a_l){
    step1(2);//It will turns right if obstacles are at left
    delay(100);
    Go(180,150);
    turn = 2;
  }else{
    step1(1);
    delay(100);
    Go(30,0);
    turn = 1;
  }//The servo motor will ratate to base position when complate its task
  myServo.write(98);
  stop();
  delay(1000);
}
int key_convert(char key){
  int integer = 0;
  if( key == '1'){
    integer = 1;
  }else if( key == '2'){
    integer = 2;
  }else if( key == '3'){
    integer = 3;
  }else if( key == '4'){
    integer = 4;
  }else if( key == '5'){
    integer = 5;
  }else if( key == '6'){
    integer = 6;
  }else if( key == '7'){
    integer = 7;
  }else if( key == '8'){
    integer = 8;
  }else if( key == '9'){
    integer = 9;
  }else{
    integer = 0;
  }
  return integer;
}
void loop() {
  //time start counting when the robot start
  time = millis();

  char key = keypad.getKey();
  //when we enter value on keypad, it convert to integer
  if (key) {
    delay(2000);
    index = key_convert(key);
    Serial.println(key);
    if( index > 4){//make decision to choose the best way to forward
      turn = 1;
    }else{
      turn = 2;
    }//positions that the robot need count them
    position = arr[index];
  }
  if(position == 0){
    stop();//the robot stops, if there is not destination for it
  }else{//ultrasonic sensor measure the distance when the robot work
    distance = sonar.ping_cm();
    (distance <= 0)?(distance = 200):distance;//the robot don't need 0 cm
    if(distance < 25){
      Serial.println(distance);
      wall();//the robot navigate around obstacles
    }else{
      p = digitalRead(A0);
      r = digitalRead(A1);
      m = digitalRead(A2);
      l = digitalRead(A3);
      // IR sensors reads data from black lines
      IRSensor = (l*8+m*4+r*2+p);
      //convert binary to decimal to use
      run(IRSensor);
      //the robot move forward to destination and move come back to base position
      Serial.print(l);
      Serial.print(" ");
      Serial.print(m);
      Serial.print(" ");
      Serial.print(r);
      Serial.print(" ");
      Serial.print(p);
      Serial.print("    ");
      Serial.println(distance);
    }
  } 
}
