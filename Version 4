#include <Servo.h>
#include <NewPing.h>

#define TRIG_PIN  12
#define ECHO_PIN  13
#define MAX_DISTANCE 200  

NewPing sonar(TRIG_PIN, ECHO_PIN, MAX_DISTANCE);
Servo myServo;

unsigned long time,
              start,
              time_p;

int distance, 
    IRSensor,
    turn = 0,
    anglea = 90,
    angleb = 90,
    left,
    right;

int enb = 5,
    ena = 6,
    in1 = 7,
    in2 = 8,
    in3 = 9,
    in4 = 10;
int l,m,r,p;
int button_1 = 0,
    button_2 = 0,
    value = 0,
    push = 0,
    inform_1 = 0,
    inform_2 = 0,
    position = 0;
void setup() {

  Serial.begin(9600);
  pinMode(enb , OUTPUT);
  pinMode(ena , OUTPUT);
  pinMode(in1 , OUTPUT);
  pinMode(in2 , OUTPUT);
  pinMode(in3 , OUTPUT);
  pinMode(in4 , OUTPUT);

  pinMode(2,INPUT);
  pinMode(4,INPUT);

  myServo.attach(3);

  for(int i = 0 ; i <= 180 ; i++){
    myServo.write(i);
    delay(10);
  }
  for(int i = 180 ; i >= 90 ; i--){
    myServo.write(i);
    delay(10);
  }
}
void go_straight(){

  digitalWrite(in1 , LOW);
  digitalWrite(in2 , HIGH);
  digitalWrite(in3 , LOW);
  digitalWrite(in4 , HIGH);

  analogWrite(ena , 100);
  analogWrite(enb , 93);

}
void turn_right(){

  digitalWrite(in1 , LOW);
  digitalWrite(in2 , HIGH);
  digitalWrite(in3 , LOW);
  digitalWrite(in4 , LOW);

  analogWrite(ena , 90);
  analogWrite(enb , 0);

}
void turn_left(){
  
  digitalWrite(in1 , LOW);
  digitalWrite(in2 , LOW);
  digitalWrite(in3 , LOW);
  digitalWrite(in4 , HIGH);

  analogWrite(ena , 0);
  analogWrite(enb , 80);

}
void stop(){
  
  digitalWrite(in1 , LOW);
  digitalWrite(in2 , LOW);
  digitalWrite(in3 , LOW);
  digitalWrite(in4 , LOW);

  analogWrite(ena , 0);
  analogWrite(enb , 0);

}
void run(int data){
  if(p == 1){
    inform_1 = 1;
  }
  if((inform_1 == 1) && (p == 0)){
    inform_2++;
    inform_1 = 0;
    time_p = time;
  }
  if(inform_2 == 2 && (value != 100)){
    position++;
    inform_2 = 0;
  }
  if(time-time_p > 500){
    inform_2 = 0;
  }
  if( data == 8 ){
    turn_left();
    turn = 1;
  }else if(data == 2){
    turn_right();
    turn = 2;
  }else if( data == 0){
    if(turn == 1){
      turn_left();
    }else if(turn == 2){
      turn_right();
    }
  }else{
    if(data == 6){
      turn = 2;
    }else if(data == 12){
      turn = 1;
    }
    go_straight();
  }
  if( inform_2 == 3){
    value = 0;
    position = 0;
  }else if(position == value ){
    stop();
    delay(3000);
    turn_left();
    delay(1000);
    value = 100;
    position = 0;
    turn = 1;
  }
}
void wall(){
  stop();
  delay(1000);
  int i,j;
  left = distance;
  for(i = 90 ; (i <= 180) && left < (25/(cos((i-90)*(PI / 180)))) ; i++){
    myServo.write(i);
    delay(100);
    left = sonar.ping_cm(); 
    (left <= 0)?(left = 200):(left);
  }
  int t;
  for(t = i ; t > 90 ; t--){
    myServo.write(t);
    delay(10);
  }
  right = distance;
  for(j = 90 ; (j >= 0) && right < (25/(cos((90-j)*(PI / 180)))) ; j--){
    myServo.write(j);
    delay(100);
    right = sonar.ping_cm();
    (right <= 0)?(right = 200):(right);
  }
  for(int x =  j; x <= 90 ; x++){
    myServo.write(t);
    delay(10);
  }
  delay(500);
  int find = 0;
  if((i-90) > (90-j)){
    while(find < (25/(cos((i-90)*(PI / 180))))){
      find = sonar.ping_cm();
      (find <= 0)?(find = 200):(find);
      turn_left();
      delay(10);
    }
    turn_left();
    delay(50);
    stop();
    delay(100);
    int y ;
    for( y = 90 ;  y >= 0 && find > (25/(cos((i-90)*(PI / 180)))) ; y--){
      myServo.write(y);
      find = sonar.ping_cm();
      (find <= 0)?(find = 200):(find);
      delay(100);
    }
    while(find < (25/(cos((i-90)*(PI / 180))))){
      find = sonar.ping_cm();
      (find <= 0)?(find = 200):(find);
      delay(10);
      go_straight();
    }  
    go_straight(); 
    delay(600);
    myServo.write(0);
    delay(100);
    find = 200;
    while(find > 25){
      find = sonar.ping_cm();
      (find <= 0)?(find = 200):(find);


      delay(10);
      turn_right();
    }
    while(find < 25){
      find = sonar.ping_cm();
      (find <= 0)?(find = 200):(find);
      delay(10);
      go_straight();
    } 
    turn_right();
    delay(500);
    do {
      go_straight();
      p = digitalRead(A0);
      r = digitalRead(A1);
      m = digitalRead(A2);
      l = digitalRead(A3);
      IRSensor = (l * 8 + m * 4 + r * 2 + p);
    } while (IRSensor == 0);
    myServo.write(90);
    delay(100);
    turn = 1;
  }else{
    while(find < (25/(cos((j-90)*(PI / 180))))){
      find = sonar.ping_cm();
      (find <= 0)?(find = 200):(find);
      turn_right();
      delay(10);
    }
    turn_right();
    delay(100);
    stop();
    delay(100);
    int y ;
    for( y = 90 ;  y < 180 && find > (25/(cos((i-90)*(PI / 180)))) ; y++){
      myServo.write(y);
      find = sonar.ping_cm();
      (find <= 0)?(find = 200):(find);
      delay(100);
    }
    while(find < (25/(cos((i-90)*(PI / 180))))){
      find = sonar.ping_cm();
      (find <= 0)?(find = 200):(find);
      delay(10);
      go_straight();
    }  
    go_straight();
    delay(600);
    myServo.write(180);
    delay(100);
    find = 200;
    while(find > 25){
      find = sonar.ping_cm();
      (find <= 0)?(find = 200):(find);
      delay(10);
      turn_left();
    }
    while(find < 25){
      find = sonar.ping_cm();
      (find <= 0)?(find = 200):(find);
      delay(10);
      go_straight();
    } 
    turn_left();
    delay(500);
    do {
      go_straight();
      p = digitalRead(A0);
      r = digitalRead(A1);
      m = digitalRead(A2);
      l = digitalRead(A3);
      IRSensor = (l * 8 + m * 4 + r * 2 + p);
    } while (IRSensor == 0);
    myServo.write(90);
    delay(100);
    turn = 2;
  }
  stop();
  delay(100);
}
void loop() {
  
  go_straight();
  delay(50);
  turn_left();
  delay(50);

  time = millis();

  button_1 = digitalRead(2);
  button_2 = digitalRead(4);

  if((button_1 == 1)){
    push = 1;
  }
  if((button_1 == 0) && (push == 1)){
    value++;
    push = 0;
    start = time;
    if(value > 6){
      value = 0;
    }
  }
  if(button_2 == 1){
    value = 0;
  }
  int new_value = 0;
  if(value == 0){
    stop();
    start = time;
  }else if((value > 0) && (time - start) > 2000){
    distance = sonar.ping_cm();

    (distance <= 0)?(distance = 200):distance;

    if(distance < 25){
      wall();
    }else{
      p = digitalRead(A0);
      r = digitalRead(A1);
      m = digitalRead(A2);
      l = digitalRead(A3);
      
      IRSensor = (l*8+m*4+r*2+p);
      
      run(IRSensor);
    }
  }
  Serial.print(l);
  Serial.print(" ");
  Serial.print(m);
  Serial.print(" ");
  Serial.print(r);
  Serial.print(" ");
  Serial.print(p);
  Serial.print("    ");
  Serial.println(distance);
  
}
